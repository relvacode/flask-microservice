#!/usr/bin/python2.7

import os
import sys
from subprocess import Popen, PIPE, STDOUT
from jinja2 import Template
import logging
import argparse
from datetime import datetime

os.umask(022)

class Configuration:
    app_path = "/app"
    requirements_pip = os.path.join(app_path, 'requirements.pip')
    requirements_apt = os.path.join(app_path, 'requirements.apt')


os.umask(022)


def logger_init(program_id, log_file=None, verbose=1):
    """
    Start up a logger
    """
    # Create logger.
    logger = logging.getLogger(program_id)
    # Set format for logs
    formatter = logging.Formatter("%(asctime)s\t%(name)s\t%(message)s")
    # If you specified a file set up the file handler
    if log_file:
        file_h = logging.FileHandler(log_file)
        file_h.setFormatter(formatter)
        logger.addHandler(file_h)
    # Output to screen if verbose or no log file
    if verbose or not log_file:
        stdout_h = logging.StreamHandler()
        stdout_h.setFormatter(formatter)
        logger.addHandler(stdout_h)

    # If verbose is set then set logging level to INFO, else set to WARN
    if verbose == 1:
        logger.setLevel(logging.INFO)
    elif verbose >= 2:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.WARN)
    return logger


def log(level, op, message):
    level_map = {"warn": logger.warn, "debug": logger.debug, "info": logger.info,
                 "error": logger.error}
    logger.info('%s\t%s' % (op, str(message)))


def install(apt_requirements=None, pip_requirements=None):
    if apt_requirements is not None and len(apt_requirements) > 0:
        log('info', 'apt_update', 'updating apt cache')
        u = Popen(['/usr/bin/apt-get', '-qq', 'update'], stdout=PIPE, stderr=STDOUT)
        for line in iter(u.stdout.readline, ""):
            log('info', 'apt_update', line.strip())
        u.wait()

        log('info', 'apt', 'installing {:d} system requirements'.format(len(apt_requirements)))
        cmd = ['/usr/bin/apt-get', '-qq', '-y', 'install'] + apt_requirements
        p = Popen(cmd, stdout=PIPE, stderr=STDOUT)
        for line in iter(p.stdout.readline, ""):
            log('info', 'apt', line.strip())
        p.wait()

    if pip_requirements is not None and len(pip_requirements) > 0:
        log('info', 'pip', 'installing {:d} pip requirements'.format(len(pip_requirements)))
        for requirement in pip_requirements:
            p = Popen(['/usr/bin/pip', 'install', requirement], stdout=PIPE, stderr=STDOUT)
            for line in iter(p.stdout.readline, ""):
                log('info', "pip", line.strip())
            p.wait()

def execute(hostname=None):
    procs = []
    procs.append(Popen(['/usr/local/bin/uwsgi', '--ini', '/etc/uwsgi/uwsgi.conf', '--need-app', '-b', '32768', '-t', '60', '--uid', '33', '--gid', '33', '--post-buffering=1']))
    procs.append(Popen(['/usr/sbin/nginx']))
    
    for p in procs:
        p.wait()

if __name__ == "__main__":
    config = Configuration()

    parser = argparse.ArgumentParser()
    parser.add_argument('--execute', action="store_true", help="Execute application")
    parser.add_argument('--install', action="store_true", help="Install requirements")

    args = parser.parse_args()

    logger = logger_init('init_container')

    if os.path.isfile(config.requirements_apt):
        with open(config.requirements_apt, 'r') as f:
            apt_requirements = [line.strip() for line in f.readlines()]
    else:
        apt_requirements = None

    if os.path.isfile(config.requirements_pip):
        with open(config.requirements_pip, 'r') as f:
            pip_requirements = [line.strip() for line in f.readlines()]
    else:
        pip_requirements = None
    
    if args.install:
        install(pip_requirements=pip_requirements, apt_requirements=apt_requirements)
    if args.execute:
        execute(hostname=os.environ.get('VIRTUAL_HOST'))
